SOURCE TAGS

	-	Both <audio> and <video> tags support nested <source> tags of 
		different encodings.
			<audio controls>
              <source src="foo.ogg" type="audio/ogg"/>
              <source src="foo.mp3" type="audio/mp3"/>
              Sorry, you're browser doesn't support ogg or mp3 codecs
              (or possibly audio tags).
            </audio>


FEATURE DETECTING CODEC SUPPORT
	
			function canPlayOgg () {
              var a = document.createElement('audio');
              return !!(a.canPlayType &&
                        a.canPlayType('audio/ogg; codecs="vorbis"')
                         .replace(/no/, ''));
            };

            canPlayOgg(); // true or false
            
AUDIO
			  <audio controls>
                <source src="../media/lateralus_clip.ogg" type="audio/ogg"/>
                <source src="../media/lateralus_clip.mp3" type="audio/mp3"/>
              </audio>
	-	e.g.
				  <audio id="noControls">
					  <source src="../media/lateralus_clip.ogg" type="audio/ogg"/>
					  <source src="../media/lateralus_clip.mp3" type="audio/mp3"/>
				  </audio>
				  <button id="play">Play/Pause</button>
				  <button id="volUp">Volume+</button>
				  <button id="volDown">Volume->/button>
				  <input id="seek" type="range" value="" max=""/>
				  <script>
					  var audio = document.getElementById("noControls");
					  var play = document.getElementById("play");
					  var volUp = document.getElementById("volUp");
					  var volDown = document.getElementById("volDown");
					  var seek = document.getElementById("seek");
					  var playing = false;

					  play.addEventListener("click", function (e) {
							playing = !playing;
							if (playing) {
							  audio.play();
							} else {
							  audio.pause();
							}
					  });

					  function changeVol (up) {
							if (up) {
							  audio.volume += 0.1;
							} else {
							  audio.volume -= 0.1;
							}
					  };

					  volUp.addEventListener("click", function () {
							changeVol(true);
					  });

					  volDown.addEventListener("click", function () {
							changeVol(false);
					  });

					  audio.addEventListener("timeupdate", function (e) {
							seek.value = audio.currentTime;
					  });

					  seek.min = seek.value = audio.seekable.start(0);
					  seek.max = audio.seekable.end(0);
					  seek.addEventListener("change", function (e) {
						audio.currentTime = seek.value;
					  });
				</script>
	-	e.g. This code snippet will result in a loop
				<audio id="audioA" controls>
					  <source src="../media/lateralus_clip.ogg" type="audio/ogg"/>
					  <source src="../media/lateralus_clip.mp3" type="audio/mp3"/>
				</audio>
				<br/>
				<audio id="audioB" controls>
					  <source src="../media/lateralus_clip.ogg" type="audio/ogg"/>
					  <source src="../media/lateralus_clip.mp3" type="audio/mp3"/>
				</audio>
				<script>
					  var audioA = document.getElementById("audioA");
					  var audioB = document.getElementById("audioB");

					  audioA.addEventListener("ended", function () {
							audioB.currentTime = 0;
							audioB.play();
					  });

					  audioB.addEventListener("ended", function () {
							audioA.currentTime = 0;
							audioA.play();
					  });
				</script>
			
				
VIDEOS
			<video controls>
              <source src="../media/bunny.webm" type="video/webm"/>
              <source src="../media/bunny.mp4" type="video/mp4"/>
            </video>

DRAWING IN CANVAS
-	Method:
	1.	Get context
	2.	A var containing canvas.toDataURL(type, encoderOptions);
		This is to return data URIs containing rep of image in format
		specified by type parameter. Returned image is in res of 96 dpi.
		e.g.	canvas.toDataURL('image/png', 0.75);
	3.	buildImageFromDataUrl( dataURI)
	
	e.g.
		var inMemoryCanvas = document.createElement('canvas');
		inMemoryCanvas.width = 500;
		inMemoryCanvas.height = 400;
		buildImageFromDataUrl(inMemoryCanvas.toDataURL(format, quality));
	
	function buildImageFromDataUrl (dataURL) {
      var image = new Image();
      image.src = dataURL;
      document.body.appendChild(image);
    }

DRAWING PATH IN CANVAS 2D CONTEXT

	var points = [[100, 300],[100, 100],[200, 300],[200, 100]];
    drawPath(context, points);
	
	function drawPath(context,points){
		context.beginPath();
		context.moveTo(points[0][0],points[0][1]);
		FOR(i,1,points.length-1){
			context.lineTo(points[i][0], points[i][1]);
		}
		context.stroke();
	}	

DRAWING CIRCLE

function i (context) {
      var center_x = 300,
        center_y = 125,
        radius = 25,
        start_angle = 0,
        end_angle = 2 * Math.PI,
        counter_clockwise = false;
        
      // Draw the stem of an 'i'.
      drawPath(context, [[300, 300], [300, 200]]);
      
      // Draw the dot of an 'i', which is a circle.
      context.beginPath(); // otherwise we get a line from the stem
      context.arc(center_x, center_y, radius, start_angle, end_angle,
        counter_clockwise);
      context.stroke();
      
      /*
      Note we can also draw quadratic and bezier curves with
      context.quadraticCurveTo(control_x, control_y, end_x, end_y)
      and
      context.bezierCurveTo(control_x1, control_y1, control_x2, control_y2,
        end_x, end_y);
      
      context.arcTo(control_x, control_y, end_x, end_y, radius);
      can also be used for arcs.
      
      Also, for more info on the clockwise argument for arc, look up
      nonzero winding rule for filling paths to perform cutouts.
      */
}


DRAWING RECTANGLE

function k (context) {
      var rect = {
        x: 500,
        y: 100,
        w: 20,
        h: 200
      };
      
      // Drawing rectangles.
      context.strokeRect(rect.x, rect.y, rect.w, rect.h);
      // context.fillRect to fill instead of stroke
      
      // Drawing polygons
      context.beginPath();
      context.moveTo(rect.x + rect.w, rect.y + 5 * rect.h / 8);
      context.lineTo(600, 150);
      context.lineTo(600, 300);
      // Instead of recalculating start point, context.closePath() will lineTo
      // first point.
      context.closePath();
      context.stroke();
}


COLORING: STROKE, GRADIENT, MAPPING
https://github.com/nickdesaulniers/canvas2dcontext/blob/master/examples/2.gradients_shadows_patterns.html

TEXTS
https://github.com/nickdesaulniers/canvas2dcontext/blob/master/examples/3.text.html
